#!/usr/bin/env node
/**
 *    Copyright 2021 John Jackson
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

const util = require("util");
const fs = require("fs");
const minimist = require("minimist");
const { Compile, Environment, Result } = require("./lib/js/src/AcutisJs");
const { loadTemplate } = require("./node-utils");
const { version } = require("./package.json");
const { stdin } = process;

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

async function getStdin() {
  let result = "";
  if (stdin.isTTY) {
    return result;
  } else {
    stdin.setEncoding("utf8");
    for await (const chunk of stdin) {
      result += chunk;
    }
    return result;
  }
}

const args = minimist(process.argv.slice(2), {
  string: ["data", "output"],
  boolean: ["async", "help", "table", "version"],
  alias: {
    a: "async",
    d: "data",
    h: "help",
    o: "output",
    t: "table",
    v: "version",
  },
});

const logError = args.table ? console.table : console.error;

function onError(e) {
  logError(e);
  throw new Error("I can't continue due to these errors.");
}

if (args.version) {
  console.log(version);
} else if (args.help || args._.length === 0) {
  console.log(`Usage:
  acutis [options] [template] [templates...]

Options:
  -a, --async                   Enable asynchronous templates. Default: false.
  -d, --data                    The path to the JSON data file. Default: stdin.
  -o, --output                  The path to write the output. Default: stdout.
  -t, --table                   Print errors in a table. Default: false.
  -h, --help                    Show this message and exit.
  -v, --version                 Show the version and exit.

Templates:
  The first template listed is the root template. Templates with .js, .mjs,
  or .cjs extensions are rendered using their default export. For all other
  file types, their text content is used as the template.

Examples:
  acutis --data=data.json --output=index.html Index.acutis Header.js Footer.acutis
  acutis Index.acutis _includes/**/*.(js|mjs|acutis) < data.json > index.html
  curl https://example.com/api | acutis Index.acutis *.(js|acutis) -o index.html`);
} else {
  (async function () {
    try {
      const files = await Promise.all(args._.map(loadTemplate));
      const json = await (args.data ? readFile(args.data) : getStdin());
      const props = json === "" ? {} : JSON.parse(json);
      const firstFile = files.shift();
      const components = Result.getOrElse(
        Compile.Components.make(files),
        onError
      );
      const template = Result.getOrElse(
        Compile.make(firstFile, components),
        onError
      );
      const env = args.async ? Environment.async : Environment.sync;
      const result = await template(env, props, {});
      const output = Result.getOrElse(result, onError);
      if (args.output) {
        await writeFile(args.output, output, "utf8");
        console.log(`I successfully wrote ${args.output}.`);
      } else {
        process.stdout.write(output, "utf8");
      }
    } catch (e) {
      if (e.message) {
        console.error(e.message);
      } else {
        console.error(e);
      }
      process.exitCode = 1;
    }
  })();
}
