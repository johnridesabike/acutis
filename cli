#!/usr/bin/env node
/**
  Copyright (c) 2021 John Jackson.

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

const util = require("util");
const fs = require("fs");
const minimist = require("minimist");
const { Compile, Render, Result } = require("./lib/js/src/AcutisJs");
const { loadTemplate, loadSrc } = require("./node-utils");
const { version } = require("./package.json");
const { stdin } = process;

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

async function getStdin() {
  let result = "";
  if (stdin.isTTY) {
    return result;
  } else {
    stdin.setEncoding("utf8");
    for await (const chunk of stdin) {
      result += chunk;
    }
    return result;
  }
}

const args = minimist(process.argv.slice(2), {
  string: ["data", "output"],
  boolean: ["async", "help", "table", "version"],
  alias: {
    a: "async",
    d: "data",
    h: "help",
    o: "output",
    t: "table",
    v: "version",
  },
});

const logError = args.table ? console.table : console.error;

function onError(e) {
  logError(e);
  throw new Error("I can't continue due to these errors.");
}

if (args.version) {
  console.log(version);
} else if (args.help || args._.length === 0) {
  console.log(`Usage:
  acutis [options] [template] [templates...]

Options:
  -a, --async                   Enable asynchronous templates. Default: false.
  -d, --data                    The path to the JSON data file. Default: stdin.
  -o, --output                  The path to write the output. Default: stdout.
  -t, --table                   Print errors in a table. Default: false.
  -h, --help                    Show this message and exit.
  -v, --version                 Show the version and exit.

Templates:
  The first template listed is the root template. Templates with .js, .mjs,
  or .cjs extensions are rendered using their default export. For all other
  file types, their text content is used as the template.

Examples:
  acutis --data=data.json --output=index.html Index.acutis Header.js Footer.acutis
  acutis Index.acutis _includes/**/*.(js|mjs|acutis) < data.json > index.html
  curl https://example.com/api | acutis Index.acutis *.(js|acutis) -o index.html`);
} else {
  (async function () {
    try {
      const firstFile = args._.shift();
      const files = await Promise.all(args._.map(loadTemplate));
      const json = await (args.data ? readFile(args.data) : getStdin());
      const props = json === "" ? {} : JSON.parse(json);
      const components = Result.getOrElse(
        Compile.Components.make(files),
        onError
      );
      const [name, src] = await loadSrc(firstFile);
      const template = Result.getOrElse(
        Compile.make(name, src, components),
        onError
      );
      const renderFn = args.async ? Render.async : Render.sync;
      const result = await renderFn(template, props);
      const output = Result.getOrElse(result, onError);
      if (args.output) {
        await writeFile(args.output, output, "utf8");
        console.log(`I successfully wrote ${args.output}.`);
      } else {
        process.stdout.write(output, "utf8");
      }
    } catch (e) {
      if (e.message) {
        console.error(e.message);
      } else {
        console.error(e);
      }
      process.exitCode = 1;
    }
  })();
}
