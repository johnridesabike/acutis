// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "@rescript/std/lib/es6/caml.js";
import * as Belt_Float from "@rescript/std/lib/es6/belt_Float.js";
import * as Debug$AcutisLang from "./Debug.mjs";
import * as Belt_MutableQueue from "@rescript/std/lib/es6/belt_MutableQueue.js";

function toString(x) {
  switch (x.TAG | 0) {
    case /* Tkn_Text */0 :
        return "[text]: " + x._1;
    case /* Tkn_Comment */1 :
        return "{*" + x._1 + "*}";
    case /* Tkn_String */2 :
        return "\"" + x._1 + "\"";
    case /* Tkn_Int */3 :
    case /* Tkn_Float */4 :
        return String(x._1);
    case /* Tkn_True */5 :
        return "true";
    case /* Tkn_False */6 :
        return "false";
    case /* Tkn_Null */7 :
        return "null";
    case /* Tkn_Comma */8 :
        return ",";
    case /* Tkn_Colon */9 :
        return ":";
    case /* Tkn_OpenBracket */10 :
        return "[";
    case /* Tkn_CloseBracket */11 :
        return "]";
    case /* Tkn_OpenBrace */12 :
        return "{";
    case /* Tkn_CloseBrace */13 :
        return "}";
    case /* Tkn_OpenParen */14 :
        return "(";
    case /* Tkn_CloseParen */15 :
        return ")";
    case /* Tkn_OpenPointyBracket */16 :
        return "<";
    case /* Tkn_ClosePointyBracket */17 :
        return ">";
    case /* Tkn_Spread */18 :
        return "...";
    case /* Tkn_Slash */20 :
        return "/";
    case /* Tkn_Block */21 :
        return "#";
    case /* Tkn_Equals */22 :
        return "=";
    case /* Tkn_ComponentName */19 :
    case /* Tkn_Identifier */23 :
        return x._1;
    case /* Tkn_Tilde */24 :
        return "~";
    case /* Tkn_Question */25 :
        return "?";
    case /* Tkn_Ampersand */26 :
        return "&";
    case /* Tkn_Bang */27 :
        return "!";
    case /* Tkn_At */28 :
        return "@";
    case /* Tkn_Echo */29 :
        return "{{";
    case /* Tkn_EndOfFile */30 :
        return "[end of file]";
    
  }
}

function debug(x) {
  return x._0;
}

var Token = {
  toString: toString,
  debug: debug
};

function peekChar(source) {
  return source.str.charAt(source.pos);
}

function skipChar(source) {
  source.pos = Caml.caml_int_min(source.pos + 1 | 0, source.str.length);
  
}

function readChar(source) {
  var c = peekChar(source);
  skipChar(source);
  return c;
}

function readSubstring(_str, source, until) {
  while(true) {
    var str = _str;
    if (until(peekChar(source))) {
      return str;
    }
    _str = str + readChar(source);
    continue ;
  };
}

function endOfInt(c) {
  switch (c) {
    case "+" :
    case "-" :
    case "0" :
    case "1" :
    case "2" :
    case "3" :
    case "4" :
    case "5" :
    case "6" :
    case "7" :
    case "8" :
    case "9" :
    case "E" :
    case "e" :
        return false;
    default:
      return true;
  }
}

function readText(src, tokens) {
  var debug = Debug$AcutisLang.make(src.name, src.pos);
  var _pos = src.pos;
  while(true) {
    var pos = _pos;
    var match = src.str.charAt(pos);
    switch (match) {
      case "" :
          Belt_MutableQueue.add(tokens, {
                TAG: /* Tkn_Text */0,
                _0: debug,
                _1: src.str.slice(src.pos, pos)
              });
          src.pos = pos;
          return /* EndMode */3;
      case "{" :
          var match$1 = src.str.charAt(pos + 1 | 0);
          switch (match$1) {
            case "%" :
                Belt_MutableQueue.add(tokens, {
                      TAG: /* Tkn_Text */0,
                      _0: debug,
                      _1: src.str.slice(src.pos, pos)
                    });
                src.pos = pos + 2 | 0;
                return /* ExpressionMode */1;
            case "*" :
                Belt_MutableQueue.add(tokens, {
                      TAG: /* Tkn_Text */0,
                      _0: debug,
                      _1: src.str.slice(src.pos, pos)
                    });
                src.pos = pos + 2 | 0;
                return /* CommentMode */2;
            case "{" :
                Belt_MutableQueue.add(tokens, {
                      TAG: /* Tkn_Text */0,
                      _0: debug,
                      _1: src.str.slice(src.pos, pos)
                    });
                src.pos = pos + 2 | 0;
                return /* EchoMode */0;
            default:
              _pos = pos + 2 | 0;
              continue ;
          }
      default:
        _pos = pos + 1 | 0;
        continue ;
    }
  };
}

function readComment(src) {
  var _pos = src.pos;
  var _nested = 0;
  while(true) {
    var nested = _nested;
    var pos = _pos;
    var match = src.str.charAt(pos);
    switch (match) {
      case "" :
          throw {
                RE_EXN_ID: Debug$AcutisLang.Exit,
                _1: Debug$AcutisLang.unterminatedComment(Debug$AcutisLang.make(src.name, src.pos)),
                Error: new Error()
              };
      case "*" :
          var match$1 = src.str.charAt(pos + 1 | 0);
          if (match$1 === "}") {
            if (nested === 0) {
              var result = src.str.slice(src.pos, pos);
              src.pos = pos + 2 | 0;
              return result;
            }
            _nested = nested - 1 | 0;
            _pos = pos + 2 | 0;
            continue ;
          }
          _pos = pos + 2 | 0;
          continue ;
      case "{" :
          var match$2 = src.str.charAt(pos + 1 | 0);
          if (match$2 === "*") {
            _nested = nested + 1 | 0;
            _pos = pos + 2 | 0;
            continue ;
          }
          _pos = pos + 2 | 0;
          continue ;
      default:
        _pos = pos + 1 | 0;
        continue ;
    }
  };
}

function readJsonString(src) {
  var _str = "";
  while(true) {
    var str = _str;
    var c = readChar(src);
    switch (c) {
      case "" :
          var debug = Debug$AcutisLang.make(src.name, src.pos);
          throw {
                RE_EXN_ID: Debug$AcutisLang.Exit,
                _1: Debug$AcutisLang.unterminatedString(debug),
                Error: new Error()
              };
      case "\"" :
          return str;
      case "\\" :
          var c$1 = readChar(src);
          switch (c$1) {
            case "\"" :
            case "\\" :
                _str = str + c$1;
                continue ;
            default:
              var debug$1 = Debug$AcutisLang.make(src.name, src.pos);
              throw {
                    RE_EXN_ID: Debug$AcutisLang.Exit,
                    _1: Debug$AcutisLang.unknownEscapeSequence(debug$1, c$1),
                    Error: new Error()
                  };
          }
      default:
        _str = str + c;
        continue ;
    }
  };
}

function readNumber(c, src, debug) {
  var intStr = readSubstring(c, src, endOfInt);
  var match = peekChar(src);
  if (match === ".") {
    var floatStr = intStr + readSubstring(readChar(src), src, endOfInt);
    var num = Belt_Float.fromString(floatStr);
    if (num !== undefined) {
      return {
              TAG: /* Tkn_Float */4,
              _0: debug,
              _1: num
            };
    }
    throw {
          RE_EXN_ID: Debug$AcutisLang.Exit,
          _1: Debug$AcutisLang.illegalIdentifier(debug, floatStr),
          Error: new Error()
        };
  }
  var num$1 = Belt_Float.fromString(intStr);
  if (num$1 !== undefined) {
    return {
            TAG: /* Tkn_Int */3,
            _0: debug,
            _1: num$1 | 0
          };
  }
  throw {
        RE_EXN_ID: Debug$AcutisLang.Exit,
        _1: Debug$AcutisLang.illegalIdentifier(debug, intStr),
        Error: new Error()
      };
}

var identifierChar = /^[a-zA-Z0-9_]$/;

function endOfIdentifier(s) {
  return !identifierChar.test(s);
}

var identifierStartChar = /^[a-z_]$/;

var componentStart = /^[A-Z]$/;

function readIdentifier(c, src, debug) {
  var s = readSubstring(c, src, endOfIdentifier);
  switch (s) {
    case "false" :
        return {
                TAG: /* Tkn_False */6,
                _0: debug
              };
    case "null" :
        return {
                TAG: /* Tkn_Null */7,
                _0: debug
              };
    case "true" :
        return {
                TAG: /* Tkn_True */5,
                _0: debug
              };
    default:
      return {
              TAG: /* Tkn_Identifier */23,
              _0: debug,
              _1: s
            };
  }
}

function makeExpression(src, tokens, until) {
  var loop = true;
  while(loop) {
    var d = Debug$AcutisLang.make(src.name, src.pos);
    var c = readChar(src);
    var exit = 0;
    if (c === until) {
      loop = false;
    } else {
      switch (c) {
        case "" :
            throw {
                  RE_EXN_ID: Debug$AcutisLang.Exit,
                  _1: Debug$AcutisLang.unexpectedEof(d),
                  Error: new Error()
                };
        case "\t" :
        case "\n" :
        case "\r" :
        case " " :
            break;
        case "!" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Bang */27,
                  _0: d
                });
            break;
        case "\"" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_String */2,
                  _0: d,
                  _1: readJsonString(src)
                });
            break;
        case "#" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Block */21,
                  _0: d
                });
            break;
        case "&" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Ampersand */26,
                  _0: d
                });
            break;
        case "(" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_OpenParen */14,
                  _0: d
                });
            break;
        case ")" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_CloseParen */15,
                  _0: d
                });
            break;
        case "," :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Comma */8,
                  _0: d
                });
            break;
        case "." :
            var match = readChar(src);
            var match$1 = readChar(src);
            if (match === ".") {
              if (match$1 === ".") {
                Belt_MutableQueue.add(tokens, {
                      TAG: /* Tkn_Spread */18,
                      _0: d
                    });
              } else {
                throw {
                      RE_EXN_ID: Debug$AcutisLang.Exit,
                      _1: Debug$AcutisLang.unexpectedCharacter(d, match$1, "."),
                      Error: new Error()
                    };
              }
            } else {
              throw {
                    RE_EXN_ID: Debug$AcutisLang.Exit,
                    _1: Debug$AcutisLang.unexpectedCharacter(d, match, "."),
                    Error: new Error()
                  };
            }
            break;
        case "/" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Slash */20,
                  _0: d
                });
            break;
        case "-" :
        case "0" :
        case "1" :
        case "2" :
        case "3" :
        case "4" :
        case "5" :
        case "6" :
        case "7" :
        case "8" :
        case "9" :
            exit = 1;
            break;
        case ":" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Colon */9,
                  _0: d
                });
            break;
        case "<" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_OpenPointyBracket */16,
                  _0: d
                });
            break;
        case "=" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Equals */22,
                  _0: d
                });
            break;
        case ">" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_ClosePointyBracket */17,
                  _0: d
                });
            break;
        case "?" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Question */25,
                  _0: d
                });
            break;
        case "@" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_At */28,
                  _0: d
                });
            break;
        case "[" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_OpenBracket */10,
                  _0: d
                });
            break;
        case "]" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_CloseBracket */11,
                  _0: d
                });
            break;
        case "{" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_OpenBrace */12,
                  _0: d
                });
            break;
        case "}" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_CloseBrace */13,
                  _0: d
                });
            break;
        case "~" :
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Tilde */24,
                  _0: d
                });
            break;
        default:
          if (identifierStartChar.test(c)) {
            Belt_MutableQueue.add(tokens, readIdentifier(c, src, d));
          } else if (componentStart.test(c)) {
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_ComponentName */19,
                  _0: d,
                  _1: readSubstring(c, src, endOfIdentifier)
                });
          } else {
            throw {
                  RE_EXN_ID: Debug$AcutisLang.Exit,
                  _1: Debug$AcutisLang.invalidCharacter(d, c),
                  Error: new Error()
                };
          }
      }
    }
    if (exit === 1) {
      Belt_MutableQueue.add(tokens, readNumber(c, src, d));
    }
    
  };
  
}

function make(name, str) {
  var src = {
    name: name,
    str: str,
    pos: 0
  };
  var tokens = Belt_MutableQueue.make(undefined);
  var _mode = readText(src, tokens);
  while(true) {
    var mode = _mode;
    switch (mode) {
      case /* EchoMode */0 :
          var echoDebug = Debug$AcutisLang.make(name, src.pos);
          if (peekChar(src) === "~") {
            Belt_MutableQueue.add(tokens, {
                  TAG: /* Tkn_Tilde */24,
                  _0: Debug$AcutisLang.make(name, src.pos)
                });
            skipChar(src);
          }
          Belt_MutableQueue.add(tokens, {
                TAG: /* Tkn_Echo */29,
                _0: echoDebug
              });
          makeExpression(src, tokens, "}");
          var c = readChar(src);
          if (c === "}") {
            _mode = readText(src, tokens);
            continue ;
          }
          throw {
                RE_EXN_ID: Debug$AcutisLang.Exit,
                _1: Debug$AcutisLang.unexpectedCharacter(Debug$AcutisLang.make(name, src.pos), c, "}"),
                Error: new Error()
              };
      case /* ExpressionMode */1 :
          makeExpression(src, tokens, "%");
          var c$1 = readChar(src);
          if (c$1 === "}") {
            _mode = readText(src, tokens);
            continue ;
          }
          throw {
                RE_EXN_ID: Debug$AcutisLang.Exit,
                _1: Debug$AcutisLang.unexpectedCharacter(Debug$AcutisLang.make(name, src.pos), c$1, "}"),
                Error: new Error()
              };
      case /* CommentMode */2 :
          var debug = Debug$AcutisLang.make(name, src.pos);
          Belt_MutableQueue.add(tokens, {
                TAG: /* Tkn_Comment */1,
                _0: debug,
                _1: readComment(src)
              });
          _mode = readText(src, tokens);
          continue ;
      case /* EndMode */3 :
          Belt_MutableQueue.add(tokens, {
                TAG: /* Tkn_EndOfFile */30,
                _0: Debug$AcutisLang.make(name, src.pos)
              });
          return tokens;
      
    }
  };
}

var peek = Belt_MutableQueue.peekExn;

var pop = Belt_MutableQueue.popExn;

var debugToArray = Belt_MutableQueue.toArray;

export {
  Token ,
  make ,
  peek ,
  pop ,
  debugToArray ,
  
}
/* No side effect */
