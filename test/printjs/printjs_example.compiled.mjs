/* THIS FILE WAS GENERATED BY ACUTIS. */
let runtime_escape$0 =
  (arg$0) => {
    let result$0 = "";
    for (let i$0 = 0; i$0 < arg$0.length; i$0++) {
      let c$0 = arg$0[i$0];
      switch (c$0) {
        case "&": result$0 += "&amp;"; break;
        case "\"": result$0 += "&quot;"; break;
        case "'": result$0 += "&apos;"; break;
        case ">": result$0 += "&gt;"; break;
        case "<": result$0 += "&lt;"; break;
        case "/": result$0 += "&#x2F;"; break;
        case "`": result$0 += "&#x60;"; break;
        case "=": result$0 += "&#x3D;"; break;
        default: result$0 += c$0;
      }
    }
    return (result$0);
  };
let decode_error$0 =
  (arg$0) => {
    return (
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              Promise.reject(
                new Error(
                  [
                    "File \"",
                    "printjs_example.acutis",
                    "\"\n\
Render error.\n\
The data supplied does not match this template's interface.\n\
",
                    "Path:\n",
                    arg$1.join(" <- "),
                    "\nExpected type:\n",
                    arg$0,
                    "\nReceived value:\n",
                    String(arg$2),
                  ].join(
                    ""
                  )
                )
              )
            );
          }
        );
      }
    );
  };
let key_error$0 =
  (arg$0) => {
    return (
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              Promise.reject(
                new Error(
                  [
                    "File: ",
                    "printjs_example.acutis",
                    "\n\
Render error.\n\
The data supplied does not match this template's interface.\n\
",
                    "Path:\n",
                    arg$2.join(" <- "),
                    "\nExpected type:\n",
                    arg$0,
                    "\nInput is missing keys:\n",
                    arg$1.join(", "),
                  ].join(
                    ""
                  )
                )
              )
            );
          }
        );
      }
    );
  };
let buffer_to_promise$0 =
  (arg$0) => {
    return (
      Promise.all(arg$0).then((arg$1) => { return (arg$1.join("")); })
    );
  };
let components$0 = new Map();


export default (arg$0) => {
  let props$0 = new Map();
  let stack$0 = [];
  let is_error$0 = false;
  let missing_keys$0 = [];
  stack$0.unshift("<input>");
  if (typeof arg$0 === "object" && !(arg$0 === null)) {
    if (Object.hasOwn(arg$0, "blogPosts")) {
      let input$0 = arg$0["blogPosts"];
      stack$0.unshift("blogPosts");
      if (Array.isArray(input$0)) {
        let decoded$0 = [0, 0];
        let decode_dst$0 = decoded$0;
        for (let i$0 = 0; i$0 < input$0.length; i$0++) {
          let decode_dst_new$0 = [0, 0];
          stack$0.unshift(i$0.toString());
          if (typeof input$0[i$0] === "object" && !(input$0[i$0] === null)) {
            let decoded$1 = new Map();
            if (Object.hasOwn(input$0[i$0], "author")) {
              let input$1 = input$0[i$0]["author"];
              stack$0.unshift("author");
              if (typeof input$1 === "object" && !(input$1 === null)) {
                let decoded$2 = new Map();
                if (Object.hasOwn(input$1, "name")) {
                  let input$2 = input$1["name"];
                  stack$0.unshift("name");
                  if (input$2 === null || input$2 === undefined) {
                    decoded$2.set("name", 0);
                  } else {
                    let decoded$3 = [0];
                    stack$0.unshift("<nullable>");
                    if (typeof input$2 === "string") {
                      decoded$3[0] = input$2;
                    } else {
                      is_error$0 = true;
                    }
                    if (is_error$0) {
                      return (decode_error$0("string")(stack$0)(input$2));
                    }
                    decoded$2.set("name", decoded$3);
                    stack$0.shift();
                  }
                  if (is_error$0) {
                    return (decode_error$0("?string")(stack$0)(input$2));
                  }
                  stack$0.shift();
                } else {
                  decoded$2.set("name", 0);
                }
                if (!(missing_keys$0.length === 0)) {
                  return (
                    key_error$0("{name: ?string}")(missing_keys$0)(stack$0)
                  );
                }
                decoded$1.set("author", decoded$2);
              } else {
                is_error$0 = true;
              }
              if (is_error$0) {
                return (decode_error$0("{name: ?string}")(stack$0)(input$1));
              }
              stack$0.shift();
            } else {
              missing_keys$0.unshift("author");
            }
            if (Object.hasOwn(input$0[i$0], "content")) {
              let input$1 = input$0[i$0]["content"];
              stack$0.unshift("content");
              if (typeof input$1 === "string") {
                decoded$1.set("content", input$1);
              } else {
                is_error$0 = true;
              }
              if (is_error$0) {
                return (decode_error$0("string")(stack$0)(input$1));
              }
              stack$0.shift();
            } else {
              missing_keys$0.unshift("content");
            }
            if (Object.hasOwn(input$0[i$0], "date")) {
              let input$1 = input$0[i$0]["date"];
              stack$0.unshift("date");
              if (typeof input$1 === "string") {
                decoded$1.set("date", input$1);
              } else {
                is_error$0 = true;
              }
              if (is_error$0) {
                return (decode_error$0("string")(stack$0)(input$1));
              }
              stack$0.shift();
            } else {
              missing_keys$0.unshift("date");
            }
            if (Object.hasOwn(input$0[i$0], "image")) {
              let input$1 = input$0[i$0]["image"];
              stack$0.unshift("image");
              if (input$1 === null || input$1 === undefined) {
                decoded$1.set("image", 0);
              } else {
                let decoded$2 = [0];
                stack$0.unshift("<nullable>");
                if (typeof input$1 === "object" && !(input$1 === null)) {
                  let decoded$3 = new Map();
                  if (Object.hasOwn(input$1, "alt")) {
                    let input$2 = input$1["alt"];
                    stack$0.unshift("alt");
                    if (typeof input$2 === "string") {
                      decoded$3.set("alt", input$2);
                    } else {
                      is_error$0 = true;
                    }
                    if (is_error$0) {
                      return (decode_error$0("string")(stack$0)(input$2));
                    }
                    stack$0.shift();
                  } else {
                    missing_keys$0.unshift("alt");
                  }
                  if (Object.hasOwn(input$1, "src")) {
                    let input$2 = input$1["src"];
                    stack$0.unshift("src");
                    if (typeof input$2 === "string") {
                      decoded$3.set("src", input$2);
                    } else {
                      is_error$0 = true;
                    }
                    if (is_error$0) {
                      return (decode_error$0("string")(stack$0)(input$2));
                    }
                    stack$0.shift();
                  } else {
                    missing_keys$0.unshift("src");
                  }
                  if (!(missing_keys$0.length === 0)) {
                    return (
                      key_error$0("{alt: string, src: string}")(
                        missing_keys$0
                      )(
                        stack$0
                      )
                    );
                  }
                  decoded$2[0] = decoded$3;
                } else {
                  is_error$0 = true;
                }
                if (is_error$0) {
                  return (
                    decode_error$0("{alt: string, src: string}")(stack$0)(
                      input$1
                    )
                  );
                }
                decoded$1.set("image", decoded$2);
                stack$0.shift();
              }
              if (is_error$0) {
                return (
                  decode_error$0("?{alt: string, src: string}")(stack$0)(
                    input$1
                  )
                );
              }
              stack$0.shift();
            } else {
              decoded$1.set("image", 0);
            }
            if (Object.hasOwn(input$0[i$0], "title")) {
              let input$1 = input$0[i$0]["title"];
              stack$0.unshift("title");
              if (typeof input$1 === "string") {
                decoded$1.set("title", input$1);
              } else {
                is_error$0 = true;
              }
              if (is_error$0) {
                return (decode_error$0("string")(stack$0)(input$1));
              }
              stack$0.shift();
            } else {
              missing_keys$0.unshift("title");
            }
            if (!(missing_keys$0.length === 0)) {
              return (
                key_error$0(
                  "{\n\
  author: {name: ?string},\n\
  content: string,\n\
  date: string,\n\
  image: ?{alt: string, src: string},\n\
  title: string\n\
}"
                )(
                  missing_keys$0
                )(
                  stack$0
                )
              );
            }
            decode_dst_new$0[0] = decoded$1;
          } else {
            is_error$0 = true;
          }
          if (is_error$0) {
            return (
              decode_error$0(
                "{\n\
  author: {name: ?string},\n\
  content: string,\n\
  date: string,\n\
  image: ?{alt: string, src: string},\n\
  title: string\n\
}"
              )(
                stack$0
              )(
                input$0[i$0]
              )
            );
          }
          decode_dst$0[1] = decode_dst_new$0;
          decode_dst$0 = decode_dst_new$0;
          stack$0.shift();
        }
        props$0.set("blogPosts", decoded$0[1]);
      } else {
        is_error$0 = true;
      }
      if (is_error$0) {
        return (
          decode_error$0(
            "[\n\
  {\n\
    author: {name: ?string},\n\
    content: string,\n\
    date: string,\n\
    image: ?{alt: string, src: string},\n\
    title: string\n\
  }\n\
]"
          )(
            stack$0
          )(
            input$0
          )
        );
      }
      stack$0.shift();
    } else {
      missing_keys$0.unshift("blogPosts");
    }
    if (Object.hasOwn(arg$0, "siteTitle")) {
      let input$0 = arg$0["siteTitle"];
      stack$0.unshift("siteTitle");
      if (typeof input$0 === "string") {
        props$0.set("siteTitle", input$0);
      } else {
        is_error$0 = true;
      }
      if (is_error$0) {
        return (decode_error$0("string")(stack$0)(input$0));
      }
      stack$0.shift();
    } else {
      missing_keys$0.unshift("siteTitle");
    }
    if (!(missing_keys$0.length === 0)) {
      return (
        key_error$0(
          "{\n\
  blogPosts:\n\
    [\n\
      {\n\
        author: {name: ?string},\n\
        content: string,\n\
        date: string,\n\
        image: ?{alt: string, src: string},\n\
        title: string\n\
      }\n\
    ],\n\
  siteTitle: string\n\
}"
        )(
          missing_keys$0
        )(
          stack$0
        )
      );
    }
  } else {
    return (
      decode_error$0(
        "{\n\
  blogPosts:\n\
    [\n\
      {\n\
        author: {name: ?string},\n\
        content: string,\n\
        date: string,\n\
        image: ?{alt: string, src: string},\n\
        title: string\n\
      }\n\
    ],\n\
  siteTitle: string\n\
}"
      )(
        stack$0
      )(
        arg$0
      )
    );
  }
  let buffer$0 = [];
  buffer$0.push("<h1> Blog posts for ");
  buffer$0.push(runtime_escape$0(props$0.get("siteTitle")));
  buffer$0.push(" </h1>");
  let index$0 = 0;
  let cell$0 = props$0.get("blogPosts");
  while (!(cell$0 === 0)) {
    let props$1 = new Map(props$0);
    let list$0 = cell$0;
    let arg$1 = [list$0[0], index$0];
    let exit$0 = -1;
    let arg$2 = arg$1[0];
    let arg$3 = arg$2.get("author");
    let arg$4 = arg$3.get("name");
    let arg$5 = arg$2.get("content");
    let arg$6 = arg$2.get("date");
    let arg$7 = arg$2.get("image");
    let arg$8 = arg$2.get("title");
    let arg$9 = arg$1[1];
    exit$0 = 0;
    props$1.set("content", arg$5);
    props$1.set("date", arg$6);
    props$1.set("image", arg$7);
    props$1.set("name", arg$4);
    props$1.set("title", arg$8);
    buffer$0.push("\n  <article class=\"h-entry\">\n    <header>\n      ");
    let arg_match$0 = [props$1.get("image")];
    let props$2 = new Map(props$1);
    let exit$1 = -1;
    let arg$10 = arg_match$0[0];
    if (arg$10 === 0) {
      exit$1 = 0;
      
    } else {
      let arg$11 = arg_match$0[0];
      let arg$12 = arg$11[0];
      let arg$13 = arg$12.get("alt");
      let arg$14 = arg$12.get("src");
      exit$1 = 1;
      props$2.set("alt", arg$13);
      props$2.set("src", arg$14);
    }
    if (exit$1 === 0) {
      
    } else {
      buffer$0.push("<img src=\"");
      buffer$0.push(runtime_escape$0(props$2.get("src")));
      buffer$0.push("\" alt=\"");
      buffer$0.push(runtime_escape$0(props$2.get("alt")));
      buffer$0.push("\">\n      ");
    }
    buffer$0.push("<h2 class=\"p-name\"> ");
    buffer$0.push(runtime_escape$0(props$1.get("title")));
    buffer$0.push(" </h2>\n      <span class=\"p-author\"> By ");
    if (!(props$1.get("name") === 0)) {
      buffer$0.push(runtime_escape$0(props$1.get("name")[0]));
    } else {
      buffer$0.push(runtime_escape$0("Anonymous"));
    }
    buffer$0.push(" </span>\n      <span class=\"dt-published\"> Posted on ");
    buffer$0.push(runtime_escape$0(props$1.get("date")));
    buffer$0.push(" </span>\n    </header>\n    <div class=\"e-content\"> ");
    buffer$0.push(props$1.get("content"));
    buffer$0.push(" </div>\n  </article>\n");
    index$0++;
    cell$0 = list$0[1];
  }
  buffer$0.push("\n");
  return (buffer_to_promise$0(buffer$0));
};