  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.mjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let buffer_add_escape$0 =
    (arg$0) => {
      return (
        (arg$1) => {
          for (let i$0 = 0; i$0 < arg$1.length; i$0++) {
            let c$0 = arg$1.charCodeAt(i$0);
            switch (c$0) {
              case 38: arg$0.contents += "&amp;"; break;
              case 34: arg$0.contents += "&quot;"; break;
              case 39: arg$0.contents += "&apos;"; break;
              case 62: arg$0.contents += "&gt;"; break;
              case 60: arg$0.contents += "&lt;"; break;
              case 47: arg$0.contents += "&sol;"; break;
              case 96: arg$0.contents += "&grave;"; break;
              case 61: arg$0.contents += "&equals;"; break;
              default: arg$0.contents += String.fromCharCode(c$0);
            }
          }
        }
      );
    };
  let components$0 = new Map();
  import {"externalFunction" as import$0} from "./jsfile.mjs";
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0(Object.fromEntries(encoded$0)));
    }
  );
  export default async (arg$0) => {
    let errors$0 = {contents: ""};
    let decode_error$0 =
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              (arg$3) => {
                if (!(errors$0.contents.length === 0)) {
                  errors$0.contents += "\n\n";
                }
                errors$0.contents += "File \"";
                errors$0.contents += "template.acutis";
                errors$0.contents +=
                  "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ";
                errors$0.contents += "Path:\n";
                errors$0.contents += arg$1[0];
                let stack$0 = arg$1[1];
                while (!(stack$0 === 0)) {
                  errors$0.contents += " <- ";
                  errors$0.contents += stack$0[0];
                  stack$0 = stack$0[1];
                }
                errors$0.contents += "\nExpected type:\n";
                errors$0.contents += arg$2;
                errors$0.contents += "\nReceived value:\n";
                errors$0.contents += String(arg$3);
              }
            );
          }
        );
      };
    let key_error$0 =
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              (arg$3) => {
                if (!(errors$0.contents.length === 0)) {
                  errors$0.contents += "\n\n";
                }
                errors$0.contents += "File: ";
                errors$0.contents += "template.acutis";
                errors$0.contents +=
                  "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ";
                errors$0.contents += "Path:\n";
                errors$0.contents += arg$1[0];
                let stack$0 = arg$1[1];
                while (!(stack$0 === 0)) {
                  errors$0.contents += " <- ";
                  errors$0.contents += stack$0[0];
                  stack$0 = stack$0[1];
                }
                errors$0.contents += "\nExpected type:\n";
                errors$0.contents += arg$2;
                errors$0.contents += "\nInput is missing keys:\n";
                errors$0.contents += arg$3[0];
                let stack$1 = arg$3[1];
                while (!(stack$1 === 0)) {
                  errors$0.contents += ", ";
                  errors$0.contents += stack$1[0];
                  stack$1 = stack$1[1];
                }
              }
            );
          }
        );
      };
    let props$0 = new Map();
    let stack$0 = ["<input>", 0];
    let type$0 = "{}";
    if (typeof arg$0 === "object" && !(arg$0 === null)) {
      let missing_keys$0 = 0;
      if (!(missing_keys$0 === 0)) {
        key_error$0(stack$0)(type$0)(missing_keys$0);
      }
    } else {
      decode_error$0(stack$0)(type$0)(arg$0);
    }
    if (errors$0.contents.length === 0) {
      let buf$0 = {contents: ""};
      let buf$1 = {contents: ""};
      buf$1.contents += " text ";
      buf$0.contents +=
        await
          components$0.get("ExternalFunction")(
            new Map([["children", buf$1.contents]])
          );
      buf$0.contents += "\n";
      return (Promise.resolve(buf$0.contents));
    } else {
      return (Promise.reject(new Error(errors$0.contents)));
    }
  };

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let buffer_add_escape$0 =
    (arg$0) => {
      return (
        (arg$1) => {
          for (let i$0 = 0; i$0 < arg$1.length; i$0++) {
            let c$0 = arg$1.charCodeAt(i$0);
            switch (c$0) {
              case 38: arg$0.contents += "&amp;"; break;
              case 34: arg$0.contents += "&quot;"; break;
              case 39: arg$0.contents += "&apos;"; break;
              case 62: arg$0.contents += "&gt;"; break;
              case 60: arg$0.contents += "&lt;"; break;
              case 47: arg$0.contents += "&sol;"; break;
              case 96: arg$0.contents += "&grave;"; break;
              case 61: arg$0.contents += "&equals;"; break;
              default: arg$0.contents += String.fromCharCode(c$0);
            }
          }
        }
      );
    };
  let components$0 = new Map();
  let import$0 = require("./jsfile.cjs");
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0["externalFunction"](Object.fromEntries(encoded$0)));
    }
  );
  module.exports =
    async (arg$0) => {
      let errors$0 = {contents: ""};
      let decode_error$0 =
        (arg$1) => {
          return (
            (arg$2) => {
              return (
                (arg$3) => {
                  if (!(errors$0.contents.length === 0)) {
                    errors$0.contents += "\n\n";
                  }
                  errors$0.contents += "File \"";
                  errors$0.contents += "template.acutis";
                  errors$0.contents +=
                    "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ";
                  errors$0.contents += "Path:\n";
                  errors$0.contents += arg$1[0];
                  let stack$0 = arg$1[1];
                  while (!(stack$0 === 0)) {
                    errors$0.contents += " <- ";
                    errors$0.contents += stack$0[0];
                    stack$0 = stack$0[1];
                  }
                  errors$0.contents += "\nExpected type:\n";
                  errors$0.contents += arg$2;
                  errors$0.contents += "\nReceived value:\n";
                  errors$0.contents += String(arg$3);
                }
              );
            }
          );
        };
      let key_error$0 =
        (arg$1) => {
          return (
            (arg$2) => {
              return (
                (arg$3) => {
                  if (!(errors$0.contents.length === 0)) {
                    errors$0.contents += "\n\n";
                  }
                  errors$0.contents += "File: ";
                  errors$0.contents += "template.acutis";
                  errors$0.contents +=
                    "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ";
                  errors$0.contents += "Path:\n";
                  errors$0.contents += arg$1[0];
                  let stack$0 = arg$1[1];
                  while (!(stack$0 === 0)) {
                    errors$0.contents += " <- ";
                    errors$0.contents += stack$0[0];
                    stack$0 = stack$0[1];
                  }
                  errors$0.contents += "\nExpected type:\n";
                  errors$0.contents += arg$2;
                  errors$0.contents += "\nInput is missing keys:\n";
                  errors$0.contents += arg$3[0];
                  let stack$1 = arg$3[1];
                  while (!(stack$1 === 0)) {
                    errors$0.contents += ", ";
                    errors$0.contents += stack$1[0];
                    stack$1 = stack$1[1];
                  }
                }
              );
            }
          );
        };
      let props$0 = new Map();
      let stack$0 = ["<input>", 0];
      let type$0 = "{}";
      if (typeof arg$0 === "object" && !(arg$0 === null)) {
        let missing_keys$0 = 0;
        if (!(missing_keys$0 === 0)) {
          key_error$0(stack$0)(type$0)(missing_keys$0);
        }
      } else {
        decode_error$0(stack$0)(type$0)(arg$0);
      }
      if (errors$0.contents.length === 0) {
        let buf$0 = {contents: ""};
        let buf$1 = {contents: ""};
        buf$1.contents += " text ";
        buf$0.contents +=
          await
            components$0.get("ExternalFunction")(
              new Map([["children", buf$1.contents]])
            );
        buf$0.contents += "\n";
        return (Promise.resolve(buf$0.contents));
      } else {
        return (Promise.reject(new Error(errors$0.contents)));
      }
    };
