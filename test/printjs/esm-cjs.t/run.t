  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let acutis_escape$0 =
    (arg$0) => {
      let result$0 = "";
      for (let i$0 = 0; i$0 < arg$0.length; i$0++) {
        let c$0 = arg$0[i$0];
        switch (c$0) {
          case "&": result$0 += "&amp;"; break;
          case "\"": result$0 += "&quot;"; break;
          case "'": result$0 += "&apos;"; break;
          case ">": result$0 += "&gt;"; break;
          case "<": result$0 += "&lt;"; break;
          case "/": result$0 += "&#x2F;"; break;
          case "`": result$0 += "&#x60;"; break;
          case "=": result$0 += "&#x3D;"; break;
          default: result$0 += c$0;
        }
      }
      return (result$0);
    };
  let components$0 = new Map();
  import {"externalFunction" as import$0} from "./jsfile.cjs";
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0(Object.fromEntries(encoded$0)));
    }
  );
  export default (arg$0) => {
    let stack$0 = [];
    let errors$0 = [];
    let decode_error$0 =
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              [
                "File \"",
                "template.acutis",
                "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                "Path:\n",
                stack$0.join(" <- "),
                "\nExpected type:\n",
                arg$1,
                "\nReceived value:\n",
                String(arg$2),
              ].join(
                ""
              )
            );
          }
        );
      };
    let key_error$0 =
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              [
                "File: ",
                "template.acutis",
                "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                "Path:\n",
                stack$0.join(" <- "),
                "\nExpected type:\n",
                arg$1,
                "\nInput is missing keys:\n",
                arg$2.join(", "),
              ].join(
                ""
              )
            );
          }
        );
      };
    let props$0 = new Map();
    stack$0.unshift("<input>");
    let type$0 = "{}";
    if (typeof arg$0 === "object" && !(arg$0 === null)) {
      let missing_keys$0 = [];
      if (!(missing_keys$0.length === 0)) {
        errors$0.unshift(key_error$0(type$0)(missing_keys$0));
      }
    } else {
      errors$0.unshift(decode_error$0(type$0)(arg$0));
    }
    if (errors$0.length === 0) {
      let buffer$0 = [];
      let block_buffer$0 = [];
      block_buffer$0.push(" text ");
      buffer$0.push(
        Promise.all(block_buffer$0).then(
          (arg$1) => { return (arg$1.join("")); }
        ).then(
          (arg$1) => {
            let buffer$1 = [];
            buffer$1.push(
              components$0.get("ExternalFunction")(
                new Map([["children", arg$1]])
              )
            );
            return (
              Promise.all(buffer$1).then(
                (arg$2) => { return (arg$2.join("")); }
              )
            );
          }
        )
      );
      buffer$0.push("\n");
      return (
        Promise.all(buffer$0).then((arg$1) => { return (arg$1.join("")); })
      );
    } else {
      return (Promise.reject(new Error(errors$0.join("\n\n"))));
    }
  };

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let acutis_escape$0 =
    (arg$0) => {
      let result$0 = "";
      for (let i$0 = 0; i$0 < arg$0.length; i$0++) {
        let c$0 = arg$0[i$0];
        switch (c$0) {
          case "&": result$0 += "&amp;"; break;
          case "\"": result$0 += "&quot;"; break;
          case "'": result$0 += "&apos;"; break;
          case ">": result$0 += "&gt;"; break;
          case "<": result$0 += "&lt;"; break;
          case "/": result$0 += "&#x2F;"; break;
          case "`": result$0 += "&#x60;"; break;
          case "=": result$0 += "&#x3D;"; break;
          default: result$0 += c$0;
        }
      }
      return (result$0);
    };
  let components$0 = new Map();
  let import$0 = require("./jsfile.cjs");
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0["externalFunction"](Object.fromEntries(encoded$0)));
    }
  );
  module.exports =
    (arg$0) => {
      let stack$0 = [];
      let errors$0 = [];
      let decode_error$0 =
        (arg$1) => {
          return (
            (arg$2) => {
              return (
                [
                  "File \"",
                  "template.acutis",
                  "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                  "Path:\n",
                  stack$0.join(" <- "),
                  "\nExpected type:\n",
                  arg$1,
                  "\nReceived value:\n",
                  String(arg$2),
                ].join(
                  ""
                )
              );
            }
          );
        };
      let key_error$0 =
        (arg$1) => {
          return (
            (arg$2) => {
              return (
                [
                  "File: ",
                  "template.acutis",
                  "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                  "Path:\n",
                  stack$0.join(" <- "),
                  "\nExpected type:\n",
                  arg$1,
                  "\nInput is missing keys:\n",
                  arg$2.join(", "),
                ].join(
                  ""
                )
              );
            }
          );
        };
      let props$0 = new Map();
      stack$0.unshift("<input>");
      let type$0 = "{}";
      if (typeof arg$0 === "object" && !(arg$0 === null)) {
        let missing_keys$0 = [];
        if (!(missing_keys$0.length === 0)) {
          errors$0.unshift(key_error$0(type$0)(missing_keys$0));
        }
      } else {
        errors$0.unshift(decode_error$0(type$0)(arg$0));
      }
      if (errors$0.length === 0) {
        let buffer$0 = [];
        let block_buffer$0 = [];
        block_buffer$0.push(" text ");
        buffer$0.push(
          Promise.all(block_buffer$0).then(
            (arg$1) => { return (arg$1.join("")); }
          ).then(
            (arg$1) => {
              let buffer$1 = [];
              buffer$1.push(
                components$0.get("ExternalFunction")(
                  new Map([["children", arg$1]])
                )
              );
              return (
                Promise.all(buffer$1).then(
                  (arg$2) => { return (arg$2.join("")); }
                )
              );
            }
          )
        );
        buffer$0.push("\n");
        return (
          Promise.all(buffer$0).then((arg$1) => { return (arg$1.join("")); })
        );
      } else {
        return (Promise.reject(new Error(errors$0.join("\n\n"))));
      }
    };
