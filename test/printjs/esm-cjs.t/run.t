  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  import * as External_jsfile from "./jsfile.cjs";
  
  function decode_error(expected, recieved, debug_stack) {
    return Promise.reject(
      new Error([
        "Decode error in field: ",
        debug_stack.join(" -> "),
        "\nExpected type:\n",
        expected,
        "\nRecieved value:\n",
        recieved,
      ].join(""))
    );
  }
  
  function decode_error_field(field, debug_stack) {
    return Promise.reject(
      new Error([
        "Decode error.\nAn object is missing the field: ",
        field,
        "\nIn field: ",
        debug_stack.join(" -> "),
      ].join(""))
    );
  }
  
  function acutis_escape(str) {
    let result = "";
    for (let index = 0; index < str.length; index++) {
      let c = str[index];
      switch (c) {
        case "&": result += "&amp;"; break;
        case "\"": result += "&quot;"; break;
        case "'": result += "&apos;"; break;
        case ">": result += "&gt;"; break;
        case "<": result += "&lt;"; break;
        case "/": result += "&#x2F;"; break;
        case "`": result += "&#x60;"; break;
        case "=": result += "&#x3D;"; break;
        default: result += c;
      }
    }
    return result;
  }
  
  function promise_join(arr) {
    return Promise.all(arr).then((arr) => arr.join(""));
  }
  
  function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  export default function main(input1) {
    let data = new Map();
    let debug_stack = new Array();
    debug_stack.push("<input>");
    return promise_join([
      Promise.all([
        promise_join([" text "]),
      ]).then(function (blocks) {
        return template_ExternalFunction(new Map([["children", blocks[0]]]));
      }),
      "\n",
    ]);
  }
  

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  let External_jsfile = require("./jsfile.cjs");
  
  function decode_error(expected, recieved, debug_stack) {
    return Promise.reject(
      new Error([
        "Decode error in field: ",
        debug_stack.join(" -> "),
        "\nExpected type:\n",
        expected,
        "\nRecieved value:\n",
        recieved,
      ].join(""))
    );
  }
  
  function decode_error_field(field, debug_stack) {
    return Promise.reject(
      new Error([
        "Decode error.\nAn object is missing the field: ",
        field,
        "\nIn field: ",
        debug_stack.join(" -> "),
      ].join(""))
    );
  }
  
  function acutis_escape(str) {
    let result = "";
    for (let index = 0; index < str.length; index++) {
      let c = str[index];
      switch (c) {
        case "&": result += "&amp;"; break;
        case "\"": result += "&quot;"; break;
        case "'": result += "&apos;"; break;
        case ">": result += "&gt;"; break;
        case "<": result += "&lt;"; break;
        case "/": result += "&#x2F;"; break;
        case "`": result += "&#x60;"; break;
        case "=": result += "&#x3D;"; break;
        default: result += c;
      }
    }
    return result;
  }
  
  function promise_join(arr) {
    return Promise.all(arr).then((arr) => arr.join(""));
  }
  
  function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  module.exports = function main(input1) {
    let data = new Map();
    let debug_stack = new Array();
    debug_stack.push("<input>");
    return promise_join([
      Promise.all([
        promise_join([" text "]),
      ]).then(function (blocks) {
        return template_ExternalFunction(new Map([["children", blocks[0]]]));
      }),
      "\n",
    ]);
  }
  
