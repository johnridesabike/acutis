  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let acutis_escape$0 =
    (arg$0) => {
      let result$0 = "";
      for (let i$0 = 0; i$0 < arg$0.length; i$0++) {
        let c$0 = arg$0[i$0];
        switch (c$0) {
          case "&": result$0 += "&amp;"; break;
          case "\"": result$0 += "&quot;"; break;
          case "'": result$0 += "&apos;"; break;
          case ">": result$0 += "&gt;"; break;
          case "<": result$0 += "&lt;"; break;
          case "/": result$0 += "&#x2F;"; break;
          case "`": result$0 += "&#x60;"; break;
          case "=": result$0 += "&#x3D;"; break;
          default: result$0 += c$0;
        }
      }
      return (result$0);
    };
  let buffer_to_promise$0 =
    (arg$0) => {
      return (
        Promise.all(arg$0).then((arg$1) => { return (arg$1.join("")); })
      );
    };
  let components$0 = new Map();
  import {"externalFunction" as import$0} from "./jsfile.cjs";
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0(Object.fromEntries(encoded$0)));
    }
  );
  export default (arg$0) => {
    let stack$0 = [];
    let is_error$0 = false;
    let missing_keys$0 = [];
    let decode_error$0 =
      (arg$1) => {
        return (
          (arg$2) => {
            return (
              Promise.reject(
                new Error(
                  [
                    "File \"",
                    "template.acutis",
                    "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                    "Path:\n",
                    stack$0.join(" <- "),
                    "\nExpected type:\n",
                    arg$1,
                    "\nReceived value:\n",
                    String(arg$2),
                  ].join(
                    ""
                  )
                )
              )
            );
          }
        );
      };
    let key_error$0 =
      (arg$1) => {
        return (
          Promise.reject(
            new Error(
              [
                "File: ",
                "template.acutis",
                "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                "Path:\n",
                stack$0.join(" <- "),
                "\nExpected type:\n",
                arg$1,
                "\nInput is missing keys:\n",
                missing_keys$0.join(", "),
              ].join(
                ""
              )
            )
          )
        );
      };
    let props$0 = new Map();
    stack$0.unshift("<input>");
    if (typeof arg$0 === "object" && !(arg$0 === null)) {
      if (!(missing_keys$0.length === 0)) { return (key_error$0("{}")); }
    } else {
      return (decode_error$0("{}")(arg$0));
    }
    let buffer$0 = [];
    let blocks$0 =
      Array.from({length: 1}, (arg$1) => { return (Promise.resolve("")); });
    let buffer$1 = [];
    buffer$1.push(" text ");
    blocks$0[0] = buffer_to_promise$0(buffer$1);
    buffer$0.push(
      Promise.all(blocks$0).then(
        (arg$1) => {
          let buffer$2 = [];
          buffer$2.push(
            components$0.get("ExternalFunction")(
              new Map([["children", arg$1[0]]])
            )
          );
          return (buffer_to_promise$0(buffer$2));
        }
      )
    );
    buffer$0.push("\n");
    return (buffer_to_promise$0(buffer$0));
  };

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  let acutis_escape$0 =
    (arg$0) => {
      let result$0 = "";
      for (let i$0 = 0; i$0 < arg$0.length; i$0++) {
        let c$0 = arg$0[i$0];
        switch (c$0) {
          case "&": result$0 += "&amp;"; break;
          case "\"": result$0 += "&quot;"; break;
          case "'": result$0 += "&apos;"; break;
          case ">": result$0 += "&gt;"; break;
          case "<": result$0 += "&lt;"; break;
          case "/": result$0 += "&#x2F;"; break;
          case "`": result$0 += "&#x60;"; break;
          case "=": result$0 += "&#x3D;"; break;
          default: result$0 += c$0;
        }
      }
      return (result$0);
    };
  let buffer_to_promise$0 =
    (arg$0) => {
      return (
        Promise.all(arg$0).then((arg$1) => { return (arg$1.join("")); })
      );
    };
  let components$0 = new Map();
  let import$0 = require("./jsfile.cjs");
  components$0.set(
    "ExternalFunction",
    (arg$0) => {
      let encoded$0 = new Map();
      let props$0 = arg$0.get("children");
      encoded$0.set("children", props$0);
      return (import$0["externalFunction"](Object.fromEntries(encoded$0)));
    }
  );
  module.exports =
    (arg$0) => {
      let stack$0 = [];
      let is_error$0 = false;
      let missing_keys$0 = [];
      let decode_error$0 =
        (arg$1) => {
          return (
            (arg$2) => {
              return (
                Promise.reject(
                  new Error(
                    [
                      "File \"",
                      "template.acutis",
                      "\"\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                      "Path:\n",
                      stack$0.join(" <- "),
                      "\nExpected type:\n",
                      arg$1,
                      "\nReceived value:\n",
                      String(arg$2),
                    ].join(
                      ""
                    )
                  )
                )
              );
            }
          );
        };
      let key_error$0 =
        (arg$1) => {
          return (
            Promise.reject(
              new Error(
                [
                  "File: ",
                  "template.acutis",
                  "\n\
  Render error.\n\
  The data supplied does not match this template's interface.\n\
  ",
                  "Path:\n",
                  stack$0.join(" <- "),
                  "\nExpected type:\n",
                  arg$1,
                  "\nInput is missing keys:\n",
                  missing_keys$0.join(", "),
                ].join(
                  ""
                )
              )
            )
          );
        };
      let props$0 = new Map();
      stack$0.unshift("<input>");
      if (typeof arg$0 === "object" && !(arg$0 === null)) {
        if (!(missing_keys$0.length === 0)) { return (key_error$0("{}")); }
      } else {
        return (decode_error$0("{}")(arg$0));
      }
      let buffer$0 = [];
      let blocks$0 =
        Array.from({length: 1}, (arg$1) => { return (Promise.resolve("")); });
      let buffer$1 = [];
      buffer$1.push(" text ");
      blocks$0[0] = buffer_to_promise$0(buffer$1);
      buffer$0.push(
        Promise.all(blocks$0).then(
          (arg$1) => {
            let buffer$2 = [];
            buffer$2.push(
              components$0.get("ExternalFunction")(
                new Map([["children", arg$1[0]]])
              )
            );
            return (buffer_to_promise$0(buffer$2));
          }
        )
      );
      buffer$0.push("\n");
      return (buffer_to_promise$0(buffer$0));
    };
