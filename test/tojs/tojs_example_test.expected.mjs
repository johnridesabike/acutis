/* THIS FILE WAS GENERATED BY ACUTIS. */

let error_decode_bool = "This field must be a boolean.";
let error_decode_str = "This field must be a string.";
let error_decode_str_enum = "This field must be a string enum.";
let error_decode_int = "This field must be an int.";
let error_decode_int_enum = "This field must be an int enum.";
let error_decode_float = "This field must be a float.";
let error_decode_array = "This field must be an array.";
let error_decode_missing_field = "This object is missing a field.";
let error_decode_bad_union_key = "This object is missing a field.";
let error_pattern_failure = "This pattern-matching failed to find a path. This probably means there's a problem with the compiler.";

let escapes = {
  "&": "&amp;",
  '"': "&quot;",
  "'": "&apos;",
  ">": "&gt;",
  "<": "&lt;",
  "/": "&#x2F;",
  "`": "&#x60;",
  "=": "&#x3D;",
};

function acutis_escape(str) {
  let result = "";
  for (let c of str) {
    result += escapes[c] || c;
  }
  return result;
}

function fmt_int(i) {
  return i.toString();
}

function fmt_int_comma(i) {
  let s = i.toString();
  let l = s.length;
  let left = ((l - 1) % 3) + 1;
  let result = "";
  for (let idx = 0; idx < l; idx++) {
    if (left === 0) {
      result += ",";
      left = 3;
    }
    left--;
    result += s[idx];
  }
  return result;
}

function toFixed(prec, f) {
  if (Math.abs(f) < 1.0) {
    return f.toFixed(prec);
  } else {
    var e = parseInt(f.toString().split("+")[1]);
    if (e > 20) {
      e -= 20;
      f /= Math.pow(10, e);
      f += Array(e + 1).join("0");
      if (prec > 0) {
        f = f + "." + Array(prec + 1).join("0");
      }
      return f;
    } else {
      return f.toFixed(prec);
    }
  }
}

function fmt_float(prec, f) {
  return toFixed(prec, f).toString();
}

function fmt_float_e(prec, f) {
  let s = f.toExponential(prec);
  // exponent should be at least two digits
  let i = s.length;
  if (s.charAt(i - 3) == "e") {
    s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
  }
  return s;
}

function fmt_float_g(prec, f) {
  prec = prec === 0 ? 1 : prec;
  let s = f.toExponential(prec - 1);
  let j = s.indexOf("e");
  let exp = +s.slice(j + 1);
  if (exp < -4 || f >= 1e21 || f.toFixed(0).length > prec) {
    // remove trailing zeroes
    let i = j - 1;
    while (s.charAt(i) == "0") {
      i--;
    }
    if (s.charAt(i) == ".") {
      i--;
    }
    s = s.slice(0, i + 1) + s.slice(j);
    i = s.length;
    if (s.charAt(i - 3) == "e") {
      s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
    }
  }
  return s;
}

function fmt_bool(b) {
  return b ? "true" : "false";
}

export default async function main(input1) {
  let data = new Map();
  if ("blogPosts" in input1) {
    let input2 = input1.blogPosts;
    if (input2 instanceof Array) {
      let dst_base1 = new Array(2);
      let dst1 = dst_base1;
      for (let input_hd1 of input2) {
        let dst_new1 = new Array(2);
        let record1 = new Map();
        dst_new1[0] = record1;
        if ("author" in input_hd1) {
          let input3 = input_hd1.author;
          let record2 = new Map();
          record1.set("author", record2);
          if ("name" in input3) {
            let input4 = input3.name;
            if (input4 === null || input4 === undefined) {
              record2.set("name", null);
            } else {
              let nullable1 = new Array(1);
              record2.set("name", nullable1);
              if (typeof input4 === "string") {
                nullable1[0] = input4;
              } else {
                throw new Error(error_decode_str);
              }
            }
          } else {
            record2.set("name", null);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        if ("content" in input_hd1) {
          let input5 = input_hd1.content;
          if (typeof input5 === "string") {
            record1.set("content", input5);
          } else {
            throw new Error(error_decode_str);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        if ("date" in input_hd1) {
          let input6 = input_hd1.date;
          if (typeof input6 === "string") {
            record1.set("date", input6);
          } else {
            throw new Error(error_decode_str);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        if ("image" in input_hd1) {
          let input7 = input_hd1.image;
          if (input7 === null || input7 === undefined) {
            record1.set("image", null);
          } else {
            let nullable2 = new Array(1);
            record1.set("image", nullable2);
            let record3 = new Map();
            nullable2[0] = record3;
            if ("alt" in input7) {
              let input8 = input7.alt;
              if (typeof input8 === "string") {
                record3.set("alt", input8);
              } else {
                throw new Error(error_decode_str);
              }
            } else {
              throw new Error(error_decode_missing_field);
            }
            if ("src" in input7) {
              let input9 = input7.src;
              if (typeof input9 === "string") {
                record3.set("src", input9);
              } else {
                throw new Error(error_decode_str);
              }
            } else {
              throw new Error(error_decode_missing_field);
            }
          }
        } else {
          record1.set("image", null);
        }
        if ("title" in input_hd1) {
          let input10 = input_hd1.title;
          if (typeof input10 === "string") {
            record1.set("title", input10);
          } else {
            throw new Error(error_decode_str);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        dst1[1] = dst_new1;
        dst1 = dst_new1;
      }
      dst1[1] = null;
      data.set("blogPosts", dst_base1[1]);
    } else {
      throw new Error(error_decode_array);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("siteTitle" in input1) {
    let input11 = input1.siteTitle;
    if (typeof input11 === "string") {
      data.set("siteTitle", input11);
    } else {
      throw new Error(error_decode_str);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  return (await Promise.all([
    "<h1> Blog posts for ",
    acutis_escape(data.get("siteTitle")),
    " </h1>",
    (async function () {
      let result = [];
      let index = 0;
      let arg0 = data.get("blogPosts");
      while (arg0 !== null) {
        let data1 = new Map(data);
        let exit = null;
        exit = 0;
        data1.set("title", arg0[0].get("title"));
        data1.set("name", arg0[0].get("author").get("name"));
        data1.set("image", arg0[0].get("image"));
        data1.set("date", arg0[0].get("date"));
        data1.set("content", arg0[0].get("content"));
        switch (exit) {
          case 0:
            result.push(
              "\n\
  <article class=\"h-entry\">\n\
    <header>\n\
      ",
              (async function () {
                let data2 = new Map(data1);
                let exit = null;
                let arg0 = data1.get("image");
                if (arg0 === null) {
                  exit = 0;
                } else {
                  exit = 1;
                  data2.set("src", arg0[0].get("src"));
                  data2.set("alt", arg0[0].get("alt"));
                }
                switch (exit) {
                  case 0:
                    return (await Promise.all([])).join("");
                  case 1:
                    return (await Promise.all([
                      "<img src=\"",
                      acutis_escape(data2.get("src")),
                      "\" alt=\"",
                      acutis_escape(data2.get("alt")),
                      "\">\n\
      ",
                    ])).join("");
                  default:
                    throw new Error(error_pattern_failure);
                }
              })(),
              "<h2 class=\"p-name\"> ",
              acutis_escape(data1.get("title")),
              " </h2>\n\
      <span class=\"p-author\"> By ",
              acutis_escape(data1.get("name") !== null
                ? data1.get("name")
                : "Anonymous"),
              " </span>\n\
      <span class=\"dt-published\"> Posted on ",
              acutis_escape(data1.get("date")),
              " </span>\n\
    </header>\n\
    <div class=\"e-content\"> ",
              data1.get("content"),
              " </div>\n\
  </article>\n\
"
            );
            break;
          default:
            throw new Error(error_pattern_failure);
        }
        index++;
        arg0 = arg0[1];
      }
      return (await Promise.all(result)).join("");
    })(),
    "\n\
",
  ])).join("");
}

