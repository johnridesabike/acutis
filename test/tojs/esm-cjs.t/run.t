  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  import * as External_jsfile from "./jsfile.cjs";
  
  function pattern_failure_error() {
    throw new Error("This pattern-matching failed to find a path.\n\
  This probably means there's a problem with the compiler.");
  }
  
  function decode_error(expected, recieved, debug_stack) {
    throw new Error([
      "Decode error.\n\
  Expected type:\n\
    ",
      expected,
      "\n\
  Recieved value:\n\
    ",
      recieved,
      "\n\
  In field: ",
      debug_stack.join(" -> "),
    ].join(""));
  }
  
  function acutis_escape(str) {
    let result = "";
    for (let c of str) {
      switch (c) {
        case "&":
          result = result + "&amp;";
          break;
        case "\"":
          result = result + "&quot;";
          break;
        case "'":
          result = result + "&apos;";
          break;
        case ">":
          result = result + "&gt;";
          break;
        case "<":
          result = result + "&lt;";
          break;
        case "/":
          result = result + "&#x2F;";
          break;
        case "`":
          result = result + "&#x60;";
          break;
        case "=":
          result = result + "&#x3D;";
          break;
        default:
          result = result + c;
      }
    }
    return result;
  }
  
  async function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  export default async function main(input1) {
    let data = new Map();
    let debug_stack = new Array();
    return (await Promise.all([
      (async function () {
        let resolved0 = (await Promise.all([" text "])).join("");
        let arg0 = new Map([["children", resolved0]]);
        return template_ExternalFunction(arg0);
      })(),
      "\n\
  ",
    ])).join("");
  }
  

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  const External_jsfile = require("./jsfile.cjs");
  
  function pattern_failure_error() {
    throw new Error("This pattern-matching failed to find a path.\n\
  This probably means there's a problem with the compiler.");
  }
  
  function decode_error(expected, recieved, debug_stack) {
    throw new Error([
      "Decode error.\n\
  Expected type:\n\
    ",
      expected,
      "\n\
  Recieved value:\n\
    ",
      recieved,
      "\n\
  In field: ",
      debug_stack.join(" -> "),
    ].join(""));
  }
  
  function acutis_escape(str) {
    let result = "";
    for (let c of str) {
      switch (c) {
        case "&":
          result = result + "&amp;";
          break;
        case "\"":
          result = result + "&quot;";
          break;
        case "'":
          result = result + "&apos;";
          break;
        case ">":
          result = result + "&gt;";
          break;
        case "<":
          result = result + "&lt;";
          break;
        case "/":
          result = result + "&#x2F;";
          break;
        case "`":
          result = result + "&#x60;";
          break;
        case "=":
          result = result + "&#x3D;";
          break;
        default:
          result = result + c;
      }
    }
    return result;
  }
  
  async function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  module.exports = async function main(input1) {
    let data = new Map();
    let debug_stack = new Array();
    return (await Promise.all([
      (async function () {
        let resolved0 = (await Promise.all([" text "])).join("");
        let arg0 = new Map([["children", resolved0]]);
        return template_ExternalFunction(arg0);
      })(),
      "\n\
  ",
    ])).join("");
  }
  
