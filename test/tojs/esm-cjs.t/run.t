  $ acutis \
  >   --mode js \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  import * as External_jsfile from "./jsfile.cjs";
  
  let error_decode_bool = "This field must be a boolean.";
  
  let error_decode_str = "This field must be a string.";
  
  let error_decode_str_enum = "This field must be a string enum.";
  
  let error_decode_int = "This field must be an int.";
  
  let error_decode_int_enum = "This field must be an int enum.";
  
  let error_decode_float = "This field must be a float.";
  
  let error_decode_array = "This field must be an array.";
  
  let error_decode_missing_field = "This object is missing a field.";
  
  let error_decode_bad_union_key = "This object is missing a field.";
  
  let error_pattern_failure = "This pattern-matching failed to find a path. This probably means there's a problem with the compiler.";
  
  let escapes = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
    "/": "&#x2F;",
    "`": "&#x60;",
    "=": "&#x3D;",
  };
  
  function acutis_escape(str) {
    let result = "";
    for (let c of str) {
      result += escapes[c] || c;
    }
    return result;
  }
  
  async function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  export default async function main(input1) {
    let data = new Map();
    return (await Promise.all([
      (async function () {
        let resolved0 = (await Promise.all([" text "])).join("");
        let arg0 = new Map([["children", resolved0]]);
        return template_ExternalFunction(arg0);
      })(),
      "\n\
  ",
    ])).join("");
  }
  

  $ acutis \
  >   --mode cjs \
  >   template.acutis \
  >   --fun ./jsfile.cjs externalFunction "children = string"
  /* THIS FILE WAS GENERATED BY ACUTIS. */
  
  const External_jsfile = require("./jsfile.cjs");
  
  let error_decode_bool = "This field must be a boolean.";
  
  let error_decode_str = "This field must be a string.";
  
  let error_decode_str_enum = "This field must be a string enum.";
  
  let error_decode_int = "This field must be an int.";
  
  let error_decode_int_enum = "This field must be an int enum.";
  
  let error_decode_float = "This field must be a float.";
  
  let error_decode_array = "This field must be an array.";
  
  let error_decode_missing_field = "This object is missing a field.";
  
  let error_decode_bad_union_key = "This object is missing a field.";
  
  let error_pattern_failure = "This pattern-matching failed to find a path. This probably means there's a problem with the compiler.";
  
  let escapes = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
    "/": "&#x2F;",
    "`": "&#x60;",
    "=": "&#x3D;",
  };
  
  function acutis_escape(str) {
    let result = "";
    for (let c of str) {
      result += escapes[c] || c;
    }
    return result;
  }
  
  async function template_ExternalFunction(input1) {
    let data = new Object();
    let input2 = input1.get("children");
    data.children = input2;
    return External_jsfile.externalFunction(data);
  }
  
  module.exports = async function main(input1) {
    let data = new Map();
    return (await Promise.all([
      (async function () {
        let resolved0 = (await Promise.all([" text "])).join("");
        let arg0 = new Map([["children", resolved0]]);
        return template_ExternalFunction(arg0);
      })(),
      "\n\
  ",
    ])).join("");
  }
  
