// THIS FILE WAS GENERATED BY ACUTIS.

let escapes = {
  "&": "&amp;",
  '"': "&quot;",
  "'": "&apos;",
  ">": "&gt;",
  "<": "&lt;",
  "/": "&#x2F;",
  "`": "&#x60;",
  "=": "&#x3D;",
};

function acutis_escape(str) {
  let result = "";
  for (let c of str) {
    result += escapes[c] || c;
  }
  return result;
}

function fmt_int(i) {
  return i.toString();
}

function fmt_int_comma(i) {
  let s = i.toString();
  let l = s.length;
  let left = ((l - 1) % 3) + 1;
  let result = "";
  for (let idx = 0; idx < l; idx++) {
    if (left === 0) {
      result += ",";
      left = 3;
    }
    left--;
    result += s[idx];
  }
  return result;
}

function toFixed(prec, f) {
  if (Math.abs(f) < 1.0) {
    return f.toFixed(prec);
  } else {
    var e = parseInt(f.toString().split("+")[1]);
    if (e > 20) {
      e -= 20;
      f /= Math.pow(10, e);
      f += Array(e + 1).join("0");
      if (prec > 0) {
        f = f + "." + Array(prec + 1).join("0");
      }
      return f;
    } else {
      return f.toFixed(prec);
    }
  }
}

function fmt_float(prec, f) {
  return toFixed(prec, f).toString();
}

function fmt_float_e(prec, f) {
  let s = f.toExponential(prec);
  // exponent should be at least two digits
  let i = s.length;
  if (s.charAt(i - 3) == "e") {
    s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
  }
  return s;
}

function fmt_float_g(prec, f) {
  prec = prec === 0 ? 1 : prec;
  let s = f.toExponential(prec - 1);
  let j = s.indexOf("e");
  let exp = +s.slice(j + 1);
  if (exp < -4 || f >= 1e21 || f.toFixed(0).length > prec) {
    // remove trailing zeroes
    let i = j - 1;
    while (s.charAt(i) == "0") {
      i--;
    }
    if (s.charAt(i) == ".") {
      i--;
    }
    s = s.slice(0, i + 1) + s.slice(j);
    i = s.length;
    if (s.charAt(i - 3) == "e") {
      s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
    }
  }
  return s;
}

function fmt_bool(b) {
  return b ? "true" : "false";
}

let error_decode_bool = "This field must be a boolean.";
let error_decode_str = "This field must be a string.";
let error_decode_str_enum = "This field must be a string enum.";
let error_decode_int = "This field must be an int.";
let error_decode_int_enum = "This field must be an int enum.";
let error_decode_float = "This field must be a float.";
let error_decode_array = "This field must be an array.";
let error_decode_missing_field = "This object is missing a field.";
let error_decode_bad_union_key = "This object is missing a field.";
let error_pattern_failure =
  "This pattern-matching failed to find a path. This probably means there's a problem with the compiler.";

async function template_Component(data) {
  return (
    await Promise.all([
      "",
      "",
      acutis_escape(data.get("optional") !== null
        ? fmt_int(data.get("optional"))
        : data.get("children")),
      "\n",
      (async function () {
        let result = [];
        let index = 0;
        let arg0 = data.get("list");
        while (arg0 !== null) {
          let data1 = new Map(data);
          let exit = null;
          exit = 0;
          data1.set("i", arg0[0]);
          switch (exit) {
            case 0:
              result.push("", acutis_escape(fmt_int(data1.get("i"))), "");
              break;
            default:
              throw new Error(error_pattern_failure);
          }
          index++;
          arg0 = arg0[1];
        }
        return (await Promise.all(result)).join("");
      })(),
      "",
    ])
  ).join("");
}

export default async function main(input) {
  let data = new Map();
  if ("big_float" in input) {
    if (typeof input.big_float === "number") {
      data.set("big_float", input.big_float);
    } else {
      throw new Error(error_decode_float);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("big_int" in input) {
    if (typeof input.big_int === "number") {
      data.set("big_int", input.big_int | 0);
    } else {
      throw new Error(error_decode_int);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("bool1" in input) {
    switch (input.bool1) {
      case false:
        data.set("bool1", 0);
        break;
      case true:
        data.set("bool1", 1);
        break;
      default:
        throw new Error(error_decode_bool);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("bool2" in input) {
    switch (input.bool2) {
      case false:
        data.set("bool2", 0);
        break;
      case true:
        data.set("bool2", 1);
        break;
      default:
        throw new Error(error_decode_bool);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("dangerous" in input) {
    if (typeof input.dangerous === "string") {
      data.set("dangerous", input.dangerous);
    } else {
      throw new Error(error_decode_str);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("int_list" in input) {
    if (input.int_list instanceof Array) {
      let dst_base1 = new Array(2);
      let dst1 = dst_base1;
      for (let input_hd1 of input.int_list) {
        let dst_new1 = new Array(2);
        if (typeof input_hd1 === "number") {
          dst_new1[0] = input_hd1 | 0;
        } else {
          throw new Error(error_decode_int);
        }
        dst1[1] = dst_new1;
        dst1 = dst_new1;
      }
      dst1[1] = null;
      data.set("int_list", dst_base1[1]);
    } else {
      throw new Error(error_decode_array);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("nested_list" in input) {
    if (input.nested_list instanceof Array) {
      let dst_base2 = new Array(2);
      let dst2 = dst_base2;
      for (let input_hd2 of input.nested_list) {
        let dst_new2 = new Array(2);
        if (input_hd2 instanceof Array) {
          let dst_base3 = new Array(2);
          let dst3 = dst_base3;
          for (let input_hd3 of input_hd2) {
            let dst_new3 = new Array(2);
            if (input_hd3 instanceof Array) {
              let dst_base4 = new Array(2);
              let dst4 = dst_base4;
              for (let input_hd4 of input_hd3) {
                let dst_new4 = new Array(2);
                if (typeof input_hd4 === "number") {
                  dst_new4[0] = input_hd4 | 0;
                } else {
                  throw new Error(error_decode_int);
                }
                dst4[1] = dst_new4;
                dst4 = dst_new4;
              }
              dst4[1] = null;
              dst_new3[0] = dst_base4[1];
            } else {
              throw new Error(error_decode_array);
            }
            dst3[1] = dst_new3;
            dst3 = dst_new3;
          }
          dst3[1] = null;
          dst_new2[0] = dst_base3[1];
        } else {
          throw new Error(error_decode_array);
        }
        dst2[1] = dst_new2;
        dst2 = dst_new2;
      }
      dst2[1] = null;
      data.set("nested_list", dst_base2[1]);
    } else {
      throw new Error(error_decode_array);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("nested_nullable_list" in input) {
    if (input.nested_nullable_list instanceof Array) {
      let dst_base5 = new Array(2);
      let dst5 = dst_base5;
      for (let input_hd5 of input.nested_nullable_list) {
        let dst_new5 = new Array(2);
        if (input_hd5 === null || input_hd5 === undefined) {
          dst_new5[0] = null;
        } else {
          let nullable1 = new Array(1);
          dst_new5[0] = nullable1;
          if (input_hd5 === null || input_hd5 === undefined) {
            nullable1[0] = null;
          } else {
            let nullable2 = new Array(1);
            nullable1[0] = nullable2;
            switch (input_hd5) {
              case false:
                nullable2[0] = 0;
                break;
              case true:
                nullable2[0] = 1;
                break;
              default:
                throw new Error(error_decode_bool);
            }
          }
        }
        dst5[1] = dst_new5;
        dst5 = dst_new5;
      }
      dst5[1] = null;
      data.set("nested_nullable_list", dst_base5[1]);
    } else {
      throw new Error(error_decode_array);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("null_string_dict" in input) {
    let dict1 = new Map();
    data.set("null_string_dict", dict1);
    for (let key1 in input.null_string_dict) {
      if (
        input.null_string_dict[key1] === null ||
        input.null_string_dict[key1] === undefined
      ) {
        dict1.set(key1, null);
      } else {
        let nullable3 = new Array(1);
        dict1.set(key1, nullable3);
        if (typeof input.null_string_dict[key1] === "string") {
          nullable3[0] = input.null_string_dict[key1];
        } else {
          throw new Error(error_decode_str);
        }
      }
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("record" in input) {
    let record1 = new Map();
    data.set("record", record1);
    if ("int_enum" in input.record) {
      switch (input.record.int_enum) {
        case 8:
          record1.set("int_enum", 8);
          break;
        case 40:
          record1.set("int_enum", 40);
          break;
        default:
          throw new Error(error_decode_int_enum);
      }
    } else {
      throw new Error(error_decode_missing_field);
    }
    if ("string_enum" in input.record) {
      switch (input.record.string_enum) {
        case "no":
          record1.set("string_enum", "no");
          break;
        case "yes":
          record1.set("string_enum", "yes");
          break;
        default:
          throw new Error(error_decode_str_enum);
      }
    } else {
      throw new Error(error_decode_missing_field);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("tagged_record_bool" in input) {
    let union1 = new Map();
    data.set("tagged_record_bool", union1);
    switch (input.tagged_record_bool.tag) {
      case false:
        union1.set("tag", 0);
        if ("a" in input.tagged_record_bool) {
          if (typeof input.tagged_record_bool.a === "string") {
            union1.set("a", input.tagged_record_bool.a);
          } else {
            throw new Error(error_decode_str);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      case true:
        union1.set("tag", 1);
        if ("b" in input.tagged_record_bool) {
          if (typeof input.tagged_record_bool.b === "number") {
            union1.set("b", input.tagged_record_bool.b | 0);
          } else {
            throw new Error(error_decode_int);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      default:
        throw new Error(error_decode_bad_union_key);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("tagged_record_int" in input) {
    let union2 = new Map();
    data.set("tagged_record_int", union2);
    switch (input.tagged_record_int.tag) {
      case 0:
        union2.set("tag", 0);
        break;
      case 1:
        union2.set("tag", 1);
        if ("tuple" in input.tagged_record_int) {
          if (
            input.tagged_record_int.tuple instanceof Array &&
            input.tagged_record_int.tuple.length === 3
          ) {
            let tuple1 = new Array(3);
            union2.set("tuple", tuple1);
            if (typeof input.tagged_record_int.tuple[0] === "number") {
              tuple1[0] = input.tagged_record_int.tuple[0];
            } else {
              throw new Error(error_decode_float);
            }
            if (typeof input.tagged_record_int.tuple[1] === "string") {
              tuple1[1] = input.tagged_record_int.tuple[1];
            } else {
              throw new Error(error_decode_str);
            }
            switch (input.tagged_record_int.tuple[2]) {
              case false:
                tuple1[2] = 0;
                break;
              case true:
                tuple1[2] = 1;
                break;
              default:
                throw new Error(error_decode_bool);
            }
          } else {
            throw new Error(error_decode_array);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      default:
        throw new Error(error_decode_bad_union_key);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("tagged_record_open" in input) {
    let union3 = new Map();
    data.set("tagged_record_open", union3);
    switch (input.tagged_record_open.tag) {
      case 100:
        union3.set("tag", 100);
        if ("a" in input.tagged_record_open) {
          if (typeof input.tagged_record_open.a === "number") {
            union3.set("a", input.tagged_record_open.a | 0);
          } else {
            throw new Error(error_decode_int);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      case 200:
        union3.set("tag", 200);
        if ("b" in input.tagged_record_open) {
          if (typeof input.tagged_record_open.b === "string") {
            union3.set("b", input.tagged_record_open.b);
          } else {
            throw new Error(error_decode_str);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      case 300:
        union3.set("tag", 300);
        if ("c" in input.tagged_record_open) {
          if (typeof input.tagged_record_open.c === "number") {
            union3.set("c", input.tagged_record_open.c);
          } else {
            throw new Error(error_decode_float);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      default:
        if (typeof input.tagged_record_open.tag === "number") {
          union3.set("tag", input.tagged_record_open.tag | 0);
        } else {
          throw new Error(error_decode_int);
        }
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("tagged_record_string" in input) {
    let union4 = new Map();
    data.set("tagged_record_string", union4);
    switch (input.tagged_record_string.tag) {
      case "a":
        union4.set("tag", "a");
        if ("record_list" in input.tagged_record_string) {
          if (input.tagged_record_string.record_list instanceof Array) {
            let dst_base6 = new Array(2);
            let dst6 = dst_base6;
            for (let input_hd6 of input.tagged_record_string.record_list) {
              let dst_new6 = new Array(2);
              let record2 = new Map();
              dst_new6[0] = record2;
              if ("job" in input_hd6) {
                if (typeof input_hd6.job === "string") {
                  record2.set("job", input_hd6.job);
                } else {
                  throw new Error(error_decode_str);
                }
              } else {
                throw new Error(error_decode_missing_field);
              }
              if ("name" in input_hd6) {
                if (typeof input_hd6.name === "string") {
                  record2.set("name", input_hd6.name);
                } else {
                  throw new Error(error_decode_str);
                }
              } else {
                throw new Error(error_decode_missing_field);
              }
              dst6[1] = dst_new6;
              dst6 = dst_new6;
            }
            dst6[1] = null;
            union4.set("record_list", dst_base6[1]);
          } else {
            throw new Error(error_decode_array);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      case "b":
        union4.set("tag", "b");
        if ("open_enum" in input.tagged_record_string) {
          if (typeof input.tagged_record_string.open_enum === "number") {
            union4.set("open_enum", input.tagged_record_string.open_enum | 0);
          } else {
            throw new Error(error_decode_int);
          }
        } else {
          throw new Error(error_decode_missing_field);
        }
        break;
      default:
        throw new Error(error_decode_bad_union_key);
    }
  } else {
    throw new Error(error_decode_missing_field);
  }
  if ("unknown" in input) {
    data.set("unknown", input.unknown);
  } else {
    data.set("unknown", null);
  }
  return (
    await Promise.all([
      "",
      "Formatters\n----------\n\n%i    ",
      acutis_escape(fmt_int(data.get("big_int"))),
      "\n%,i   ",
      acutis_escape(fmt_int_comma(data.get("big_int"))),
      "\n%f    ",
      acutis_escape(fmt_float(6, data.get("big_float"))),
      "\n%2f   ",
      acutis_escape(fmt_float(2, data.get("big_float"))),
      "\n%e    ",
      acutis_escape(fmt_float_e(6, data.get("big_float"))),
      "\n%.2e  ",
      acutis_escape(fmt_float_e(2, data.get("big_float"))),
      "\n%g    ",
      acutis_escape(fmt_float_g(6, data.get("big_float"))),
      "\n%.2g  ",
      acutis_escape(fmt_float_g(2, data.get("big_float"))),
      "\n%b    ",
      acutis_escape(fmt_bool(data.get("bool1"))),
      "\n%b    ",
      acutis_escape(fmt_bool(data.get("bool2"))),
      "\n\nEscaping\n--------\n\nEscaped     ",
      acutis_escape(data.get("dangerous")),
      "\nNot escaped ",
      data.get("dangerous"),
      "\n\nMatching\n--------\n\n",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = data.get("record").get("int_enum");
        switch (arg0) {
          case 8:
            exit = 0;
            break;
          case 40:
            exit = 1;
            break;
        }
        switch (exit) {
          case 0:
            return (await Promise.all(["8\n"])).join("");
          case 1:
            return (await Promise.all(["40\n"])).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = data.get("record");
        switch (arg0.get("string_enum")) {
          case "no":
            exit = 1;
            break;
          case "yes":
            exit = 0;
            break;
        }
        switch (exit) {
          case 0:
            return (await Promise.all(["yes\n"])).join("");
          case 1:
            return (await Promise.all(["no\n"])).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = data.get("tagged_record_bool");
        switch (arg0.get("tag")) {
          case 0:
            exit = 0;
            data1.set("a", arg0.get("a"));
            break;
          case 1:
            exit = 1;
            data1.set("b", arg0.get("b"));
            break;
        }
        switch (exit) {
          case 0:
            return (
              await Promise.all(["", acutis_escape(data1.get("a")), "\n"])
            ).join("");
          case 1:
            return (
              await Promise.all([
                "",
                acutis_escape(fmt_int(data1.get("b"))),
                "\n",
              ])
            ).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = data.get("tagged_record_int");
        switch (arg0.get("tag")) {
          case 0:
            exit = 0;
            break;
          case 1:
            exit = 1;
            data1.set("c", arg0.get("tuple")[2]);
            data1.set("b", arg0.get("tuple")[1]);
            data1.set("a", arg0.get("tuple")[0]);
            break;
        }
        switch (exit) {
          case 0:
            return (await Promise.all(["Fail\n"])).join("");
          case 1:
            return (
              await Promise.all([
                "",
                acutis_escape(fmt_float(6, data1.get("a"))),
                " ",
                acutis_escape(data1.get("b")),
                " ",
                acutis_escape(fmt_bool(data1.get("c"))),
                "\n",
              ])
            ).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = data.get("tagged_record_open");
        switch (arg0.get("tag")) {
          case 200:
            exit = 0;
            data1.set("b", arg0.get("b"));
            break;
        }
        if (exit === null) {
          exit = 1;
        }
        switch (exit) {
          case 0:
            return (
              await Promise.all([" ", acutis_escape(data1.get("b")), "\n"])
            ).join("");
          case 1:
            return (await Promise.all(["Another tag!\n"])).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "\n\nMapping\n-------\n\n",
      (async function () {
        let result = [];
        let arg0 = data.get("null_string_dict");
        for (let entry of arg0) {
          let data1 = new Map(data);
          let exit = null;
          if (entry[1] === null) {
            exit = 0;
            data1.set("key", entry[0]);
          } else {
            exit = 1;
            data1.set("str", entry[1][0]);
            data1.set("key", entry[0]);
          }
          switch (exit) {
            case 0:
              result.push("", acutis_escape(data1.get("key")), " is null.\n");
              break;
            case 1:
              result.push(
                "",
                acutis_escape(data1.get("key")),
                " is ",
                acutis_escape(data1.get("str")),
                "\n"
              );
              break;
            default:
              throw new Error(error_pattern_failure);
          }
        }
        return (await Promise.all(result)).join("");
      })(),
      "",
      (async function () {
        let result = [];
        let index = 0;
        let arg0 = data.get("int_list");
        while (arg0 !== null) {
          let data1 = new Map(data);
          let exit = null;
          exit = 0;
          data1.set("i", arg0[0]);
          switch (exit) {
            case 0:
              result.push("", acutis_escape(fmt_int(data1.get("i"))), "\n");
              break;
            default:
              throw new Error(error_pattern_failure);
          }
          index++;
          arg0 = arg0[1];
        }
        return (await Promise.all(result)).join("");
      })(),
      "",
      (async function () {
        let result = [];
        let index = 0;
        let arg0 = data.get("int_list");
        while (arg0 !== null) {
          let data1 = new Map(data);
          let exit = null;
          exit = 0;
          data1.set("key", index);
          data1.set("i", arg0[0]);
          switch (exit) {
            case 0:
              result.push(
                "",
                acutis_escape(fmt_int(data1.get("key"))),
                " : ",
                acutis_escape(fmt_int(data1.get("i"))),
                "\n"
              );
              break;
            default:
              throw new Error(error_pattern_failure);
          }
          index++;
          arg0 = arg0[1];
        }
        return (await Promise.all(result)).join("");
      })(),
      "",
      (async function () {
        let result = [];
        let index = 0;
        let arg0 = data.get("nested_list");
        while (arg0 !== null) {
          let data1 = new Map(data);
          let exit = null;
          exit = 0;
          data1.set("l", arg0[0]);
          switch (exit) {
            case 0:
              result.push(
                "",
                (async function () {
                  let result = [];
                  let index = 0;
                  let arg0 = data1.get("l");
                  while (arg0 !== null) {
                    let data2 = new Map(data1);
                    let exit = null;
                    exit = 0;
                    data2.set("l2", arg0[0]);
                    switch (exit) {
                      case 0:
                        result.push(
                          "",
                          (async function () {
                            let result = [];
                            let index = 0;
                            let arg0 = data2.get("l2");
                            while (arg0 !== null) {
                              let data3 = new Map(data2);
                              let exit = null;
                              exit = 0;
                              data3.set("i", arg0[0]);
                              switch (exit) {
                                case 0:
                                  result.push(
                                    "",
                                    acutis_escape(fmt_int(data3.get("i"))),
                                    " "
                                  );
                                  break;
                                default:
                                  throw new Error(error_pattern_failure);
                              }
                              index++;
                              arg0 = arg0[1];
                            }
                            return (await Promise.all(result)).join("");
                          })(),
                          ""
                        );
                        break;
                      default:
                        throw new Error(error_pattern_failure);
                    }
                    index++;
                    arg0 = arg0[1];
                  }
                  return (await Promise.all(result)).join("");
                })(),
                ""
              );
              break;
            default:
              throw new Error(error_pattern_failure);
          }
          index++;
          arg0 = arg0[1];
        }
        return (await Promise.all(result)).join("");
      })(),
      "\n\n",
      (async function () {
        let result = [];
        let index = 0;
        let arg0 = data.get("nested_nullable_list");
        while (arg0 !== null) {
          let data1 = new Map(data);
          let exit = null;
          if (arg0[0] === null) {
            exit = 0;
          } else {
            if (arg0[0][0] === null) {
              exit = 1;
            } else {
              exit = 2;
              data1.set("b", arg0[0][0][0]);
            }
          }
          switch (exit) {
            case 0:
              result.push("Level 1 null\n");
              break;
            case 1:
              result.push("Level 2 null (This shouldn't render.)\n");
              break;
            case 2:
              result.push(
                "Level 3 ",
                acutis_escape(fmt_bool(data1.get("b"))),
                "\n"
              );
              break;
            default:
              throw new Error(error_pattern_failure);
          }
          index++;
          arg0 = arg0[1];
        }
        return (await Promise.all(result)).join("");
      })(),
      "\n\nConstructing async blocks\n-------------------------\n\n",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let resolved1 =
          (await Promise.all([" Another nested block"])).join("");
        let resolved0 = (await Promise.all([" Nested block"])).join("");
        let arg0 = new Map([["a", resolved0], ["b", resolved1]]);
        exit = 0;
        data1.set("b", arg0.get("b"));
        data1.set("a", arg0.get("a"));
        switch (exit) {
          case 0:
            return (
              await Promise.all([
                "",
                acutis_escape(data1.get("a")),
                " ",
                acutis_escape(data1.get("b")),
                "\n",
              ])
            ).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "Component\n---------\n\n",
      (async function () {
        let resolved0 = (await Promise.all(["Children prop"])).join("");
        let arg0 =
          new Map([
            ["children", resolved0],
            ["list", [1, [2, [3, null]]]],
            ["optional", null],
          ]);
        return template_Component(arg0);
      })(),
      "\n\nComplicated pattern matching\n----------------------------\n\n",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = 1;
        let arg1 = null;
        let arg2 = 3;
        switch (arg0) {
          case 1:
            if (arg1 === null) {
              switch (arg2) {
                case 0:
                  exit = 0;
                  break;
                default:
                  exit = 2;
                  data1.set("y", arg2);
              }
            } else {
              switch (arg1[0]) {
                case 1:
                  switch (arg2) {
                    case 0:
                      exit = 0;
                      break;
                    case 1:
                      exit = 3;
                      break;
                    default:
                      exit = 4;
                  }
                  break;
              }
              if (exit === null) {
                switch (arg2) {
                  case 0:
                    exit = 0;
                    break;
                  default:
                    exit = 4;
                }
              }
            }
            break;
          default:
            if (arg1 === null) {
              exit = 2;
              data1.set("y", arg2);
            } else {
              switch (arg1[0]) {
                case 1:
                  switch (arg2) {
                    case 0:
                      exit = 1;
                      data1.set("x", arg0);
                      break;
                    default:
                      exit = 4;
                  }
                  break;
              }
              if (exit === null) {
                exit = 4;
              }
            }
        }
        switch (exit) {
          case 0:
            return (await Promise.all([" 0\n"])).join("");
          case 1:
            return (
              await Promise.all([
                " 1 ",
                acutis_escape(fmt_int(data1.get("x"))),
                "\n",
              ])
            ).join("");
          case 2:
            return (
              await Promise.all([
                " 2 ",
                acutis_escape(fmt_int(data1.get("y"))),
                "\n",
              ])
            ).join("");
          case 3:
            return (await Promise.all([" 3\n"])).join("");
          case 4:
            return (await Promise.all([" 4\n"])).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = [[10, 20], 30];
        let arg1 = 40;
        switch (arg0[0][0]) {
          case 10:
            switch (arg0[0][1]) {
              case 20:
                switch (arg0[1]) {
                  case 30:
                    switch (arg1) {
                      case 40:
                        exit = 1;
                        break;
                      case 41:
                        exit = 0;
                        data1.set("_x", arg0);
                        break;
                      default:
                        exit = 2;
                        data1.set("z", arg1);
                        data1.set("_y", arg0);
                    }
                    break;
                }
                break;
            }
            break;
        }
        if (exit === null) {
          switch (arg1) {
            case 41:
              exit = 0;
              data1.set("_x", arg0);
              break;
            default:
              exit = 2;
              data1.set("z", arg1);
              data1.set("_y", arg0);
          }
        }
        switch (exit) {
          case 0:
            return (await Promise.all(["\n"])).join("");
          case 1:
            return (await Promise.all([" Pass\n"])).join("");
          case 2:
            return (
              await Promise.all([
                " ",
                acutis_escape(fmt_int(data1.get("z"))),
                "\n",
              ])
            ).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "",
      (async function () {
        let data1 = new Map(data);
        let exit = null;
        let arg0 = [[10, 20], 99];
        let arg1 = 40;
        switch (arg0[0][0]) {
          case 10:
            switch (arg0[0][1]) {
              case 20:
                switch (arg0[1]) {
                  case 30:
                    switch (arg1) {
                      case 40:
                        exit = 1;
                        break;
                      case 41:
                        exit = 0;
                        data1.set("_x", arg0);
                        break;
                      default:
                        exit = 2;
                        data1.set("z", arg1);
                        data1.set("_y", arg0);
                    }
                    break;
                }
                break;
            }
            break;
        }
        if (exit === null) {
          switch (arg1) {
            case 41:
              exit = 0;
              data1.set("_x", arg0);
              break;
            default:
              exit = 2;
              data1.set("z", arg1);
              data1.set("_y", arg0);
          }
        }
        switch (exit) {
          case 0:
            return (await Promise.all(["\n"])).join("");
          case 1:
            return (await Promise.all([" Fail\n"])).join("");
          case 2:
            return (
              await Promise.all([
                " ",
                acutis_escape(fmt_int(data1.get("z"))),
                "\n",
              ])
            ).join("");
          default:
            throw new Error(error_pattern_failure);
        }
      })(),
      "String encoding\n---------------\n\n😇👨‍💻😇\n\\\" \\ \\ \\\"\n",
    ])
  ).join("");
}

